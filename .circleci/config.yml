version: 2

jobs:
  test_linux:
    docker:
      - image: python:3.9.10
    steps:
      - checkout
      - run: make dependencies
      - run: make test
      - run: coverage report
      - run: make build-onefile VERSION=beta

  test_macos:
    macos:
      xcode: "13.2.1"
    steps:
      - run:
          name: test1
          command: |
            echo $SHELL
            cat ~/.bashrc
            cat ~/.bash_profile
            whoami
            pwd
            echo 'echo "hello world1"' >> ~/.bash_profile
            echo 'echo "hello world2"' >> ~/.bashrc
            echo 'echo "hello world3"' >> "$BASH_ENV"
      - run:
          name: test2
          command: |
            cat ~/.bash_profile
            cat ~/.bashrc
            cat $BASH_ENV

  test_integration:
    machine:
      image: ubuntu-2004:202201-02
    environment:
      K8S_VERSION: v1.19.16
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v1.22.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      # required by minikube for k8s v1.18 onwards
      - run:
          name: install conntrack
          command: |
            sudo apt-get -qq update && sudo apt-get -qq install conntrack
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION} &> $HOME/minikube.log 2>&1 < /dev/null
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: fix RBAC
          command: |
            # make default account cluster-admin
            kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount=kube-system:default
      - run:
          name: dump cluster-info
          command: |
            kubectl cluster-info
            kubectl get pods --all-namespaces
      - run: pyenv install 3.9.10
      - run: pyenv local 3.9.10
      - run: make dependencies
      - run: pyenv rehash
      - run: make integration
      - run: coverage report

  test_docker_build:
    docker:
      - image: docker:18.09
    steps:
      - checkout
      - setup_remote_docker
      - run: apk add curl make
      - run: make image

  release_beta_s3_linux:
    docker:
      - image: python:3.9.10
    steps:
      - checkout
      - run: apt-get -qq update
      - run: apt-get -qq install awscli
      - run: make dependencies
      - run: make build-onefile VERSION=beta
      - run: make publish-beta

  release_beta_s3_macos:
    macos:
      xcode: "13.2.1"
    steps:
      - checkout
      - run:
          name: install openssl, pyenv
          command: |
            brew install openssl pyenv
            echo 'eval "$(pyenv init --path)"' >> ~/.bash_profile
      - run:
          name: install python
          command: |
            PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 3.9.10
            pyenv local 3.9.10
            pip install --upgrade pip
      - run:
          name: install awscli
          command: |
            curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
            sudo installer -pkg AWSCLIV2.pkg -target /
      - run: make dependencies
      - run: pyenv rehash
      - run: make build-onedir VERSION=beta
      - run: make publish-beta

  release_beta_dockerhub:
    docker:
      - image: docker:18.09
    steps:
      - checkout
      - setup_remote_docker
      - run: echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - run: apk add curl make
      - run: make image
      - run: make publish-beta-dockerhub

  release_beta_homebrew:
    docker:
      - image: artsy/hokusai:beta
    steps:
      - add_ssh_keys
      - run:
          name: release beta homebrew
          command: |
            cd /tmp

            wget https://artsy-provisioning-public.s3.amazonaws.com/hokusai/hokusai-beta-Darwin-x86_64.tar.gz

            export UNAME=$(uname)
            if [ $UNAME == "Darwin" ]; then
              export SHA256=$(shasum -a 256 hokusai-beta-Darwin-x86_64.tar.gz | awk '{ print $1 }')
            fi

            if [ $UNAME == "Linux" ]; then
              export SHA256=$(sha256sum hokusai-beta-Darwin-x86_64.tar.gz | awk '{ print $1 }')
            fi

            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git clone git@github.com:artsy/homebrew-formulas.git
            cd ./homebrew-formulas

            cat <<EOF > ./Formula/hokusai-beta.rb
            class HokusaiBeta < Formula
              desc 'Hokusai is a Docker + Kubernetes CLI for application developers'
              homepage 'https://github.com/artsy/hokusai'
              url 'https://artsy-provisioning-public.s3.amazonaws.com/hokusai/hokusai-beta-Darwin-x86_64.tar.gz'
              sha256 '$SHA256'
              version 'beta'

              def install
                bin.install Dir["*"]
              end
            end
            EOF

            git config user.name "Hokusai CI"
            git config user.email "it@artsymail.com"
            git add ./Formula/hokusai-beta.rb
            git commit -m "Release Hokusai Beta"
            git push origin main

            cd /tmp
            rm -f hokusai-beta-Darwin-x86_64.tar.gz
            rm -rf ./homebrew-formulas

  release_s3_linux:
    docker:
      - image: python:3.9.10
    steps:
      - checkout
      - run: apt-get -qq update
      - run: apt-get -qq install awscli
      - run: make dependencies
      - run: make build-onefile
      - run: make build-onefile VERSION=latest
      - run: make publish-version
      - run: make publish-latest

  release_s3_macos:
    macos:
      xcode: "13.2.1"
    steps:
      - checkout
      - run:
          name: install openssl, pyenv
          command: |
            brew install openssl pyenv
            echo 'eval "$(pyenv init --path)"' >> ~/.bash_profile
      - run:
          name: install python
          command: |
            PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 3.9.10
            pyenv local 3.9.10
            pip install --upgrade pip
      - run:
          name: install awscli
          command: |
            curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
            sudo installer -pkg AWSCLIV2.pkg -target /
      - run: make dependencies
      - run: pyenv rehash
      - run: make build-onedir
      - run: make build-onedir VERSION=latest
      - run: make publish-version
      - run: make publish-latest

  release_dockerhub:
    docker:
      - image: docker:18.09
    steps:
      - checkout
      - setup_remote_docker
      - run: echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - run: apk add curl make
      - run: make image
      - run: make publish-dockerhub

  release_github:
    docker:
      - image: golang:1.11
    steps:
      - checkout
      - run: apt-get -qq update
      - run: apt-get -qq install awscli
      - run: go get -u github.com/tcnksm/ghr
      - run: make publish-github

  release_pip:
    docker:
      - image: python:3.9.10
    steps:
      - checkout
      - run: make dependencies
      - run: make publish-pip

  release_homebrew:
    docker:
      - image: artsy/hokusai:latest
    steps:
      - add_ssh_keys
      - run:
          name: release homebrew
          command: |
            export VERSION=$(hokusai version | sed 's/\x1B\[[0-9;]\+[A-Za-z]//g')

            cd /tmp

            wget https://artsy-provisioning-public.s3.amazonaws.com/hokusai/hokusai-$VERSION-Darwin-x86_64.tar.gz

            export UNAME=$(uname)
            if [ $UNAME == "Darwin" ]; then
              export SHA256=$(shasum -a 256 hokusai-$VERSION-Darwin-x86_64.tar.gz | awk '{ print $1 }')
            fi

            if [ $UNAME == "Linux" ]; then
              export SHA256=$(sha256sum hokusai-$VERSION-Darwin-x86_64.tar.gz | awk '{ print $1 }')
            fi

            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git clone git@github.com:artsy/homebrew-formulas.git
            cd ./homebrew-formulas

            if grep $VERSION ./Formula/hokusai.rb; then
              echo "Formula version already set to $VERSION"
              cd /tmp
              rm -rf ./homebrew-formulas
              exit 0
            fi

            echo "Bumping formula version to $VERSION"

            cat <<EOF > ./Formula/hokusai.rb
            class Hokusai < Formula
              desc 'Hokusai is a Docker + Kubernetes CLI for application developers'
              homepage 'https://github.com/artsy/hokusai'
              url 'https://artsy-provisioning-public.s3.amazonaws.com/hokusai/hokusai-$VERSION-Darwin-x86_64.tar.gz'
              sha256 '$SHA256'
              version '$VERSION'

              def install
                bin.install Dir["*"]
              end
            end
            EOF

            git config user.name "Hokusai CI"
            git config user.email "it@artsymail.com"
            git add ./Formula/hokusai.rb
            git commit -m "Release Hokusai $VERSION"
            git push origin main

            cd /tmp
            rm -f hokusai-$VERSION-Darwin-x86_64.tar.gz
            rm -rf ./homebrew-formulas

workflows:
  version: 2
  build_deploy:
    jobs:
      - test_macos:
          filters:
            branches:
              ignore: release
