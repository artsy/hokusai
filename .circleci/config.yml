version: 2

jobs:
  test_linux2:
    docker:
      - image: python:2.7.16
    steps:
      - checkout
      - run: make dependencies
      - run: make test

  test_linux3:
    docker:
      - image: python:3.5.8
    steps:
      - checkout
      - run: make dependencies
      - run: make test

  test_integration:
    machine:
      image: circleci/classic:201808-01
    environment:
      K8S_VERSION: v1.17.17
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v1.22.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION} &> $HOME/minikube.log 2>&1 < /dev/null
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: fix RBAC
          command: |
            # make default account cluster-admin
            kubectl create clusterrolebinding add-on-cluster-admin --clusterrole cluster-admin --serviceaccount=kube-system:default
      - run:
          name: dump cluster-info
          command: |
            kubectl cluster-info
            kubectl get pods --all-namespaces
      - run:
          name: Update pyenv
          command: |
            cd /opt/circleci/.pyenv/plugins/python-build/../.. 
            git pull
            cd -
      - run: pyenv install 2.7.16
      - run: echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
      - run: pyenv local 2.7.16
      - run: make dependencies
      - run: make integration

  release_beta_linux:
    docker:
      - image: python:2.7
    steps:
      - checkout
      - run: apt-get -qq update
      - run: apt-get -qq install awscli
      - run: make dependencies
      - run: make build VERSION=beta
      - run: make publish-beta

  release_beta3_linux:
    docker:
      - image: python:3.5.8
    steps:
      - checkout
      - run: apt-get -qq update
      - run: apt-get -qq install awscli
      - run: make dependencies
      - run: make build VERSION=beta3
      - run: make publish-beta3

  release_version_linux:
    docker:
      - image: python:2.7
    steps:
      - checkout
      - run: apt-get -qq update
      - run: apt-get -qq install awscli
      - run: make dependencies
      - run: make build
      - run: make build VERSION=latest
      - run: make publish-version
      - run: make publish-latest

  test_macos_10_15_6_py_2:
    macos:
      xcode: "11.6.0"
    steps:
      - checkout
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv
      - run: pyenv install 2.7.16
      - run: echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
      - run: pyenv local 2.7.16
      - run: pip install --upgrade pip
      - run: make dependencies
      - run: make test

  test_macos_10_15_6_py_3:
    macos:
      xcode: "11.6.0"
    steps:
      - checkout
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv
      - run: pyenv install 3.5.8
      - run: echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
      - run: pyenv local 3.5.8
      - run: pip install --upgrade pip
      - run: make dependencies
      - run: make test
  
  test_macos_11_1_0_py_2:
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv
      - run: pyenv install 2.7.16
      - run: echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
      - run: pyenv local 2.7.16
      - run: pip install --upgrade pip
      - run: make dependencies
      - run: make test
  
  test_macos_11_1_0_py_3:
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv
      - run: pyenv install 3.5.8
      - run: echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
      - run: pyenv local 3.5.8
      - run: pip install --upgrade pip
      - run: make dependencies
      - run: make test

  release_beta_macos:
    macos:
      xcode: "11.6.0"
    steps:
      - checkout
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install awscli openssl pyenv
      - run: PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 2.7.16
      - run: echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
      - run: pyenv local 2.7.16
      - run: pip install --upgrade pip
      - run: make dependencies
      - run: make build VERSION=beta
      - run: make publish-beta

  release_beta3_macos:
    macos:
      xcode: "11.6.0"
    steps:
      - checkout
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install awscli openssl pyenv
      - run: PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 3.5.8
      - run: echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
      - run: pyenv local 3.5.8
      - run: pip install --upgrade pip
      - run: make dependencies
      - run: make build VERSION=beta3
      - run: make publish-beta3
  
  release_beta_macos_11_python_2:
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install awscli openssl pyenv
      - run: PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 2.7.16
      - run: echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
      - run: pyenv local 2.7.16
      - run: pip install --upgrade pip
      - run: make dependencies
      - run: make build VERSION=beta3
      - run: make publish-beta-macos11-python2
  
  release_beta_macos_11_python_3:
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install awscli openssl pyenv
      - run: PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 3.5.8
      - run: echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
      - run: pyenv local 3.5.8
      - run: pip install --upgrade pip
      - run: make dependencies
      - run: make build VERSION=beta3
      - run: make publish-beta-macos11-python2

  release_version_macos:
    macos:
      xcode: "11.6.0"
    steps:
      - checkout
      - run: HOMEBREW_NO_AUTO_UPDATE=1 brew install awscli openssl pyenv
      - run: PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install 2.7.16
      - run: echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
      - run: pyenv local 2.7.16
      - run: pip install --upgrade pip
      - run: make dependencies
      - run: make build
      - run: make build VERSION=latest
      - run: make publish-version
      - run: make publish-latest

  release_pip:
    docker:
      - image: python:2.7
    steps:
      - checkout
      - run: make dependencies
      - run: make publish-pip

  release_dockerhub:
    docker:
      - image: docker:18.09
    steps:
      - checkout
      - setup_remote_docker
      - run: echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - run: apk add curl make
      - run: make image
      - run: make publish-dockerhub

  release_beta_dockerhub:
    docker:
      - image: docker:18.09
    steps:
      - checkout
      - setup_remote_docker
      - run: echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      - run: apk add curl make
      - run: make image
      - run: make publish-beta-dockerhub

  release_github:
    docker:
      - image: golang:1.11
    steps:
      - checkout
      - run: apt-get -qq update
      - run: apt-get -qq install awscli
      - run: go get -u github.com/tcnksm/ghr
      - run: make publish-github

  release_homebrew:
    docker:
      - image: hokusai:latest
    steps:
      - run:
          name: release homebrew
          command: |
            VERSION=$(cat ./hokusai/VERSION)

            cd /tmp

            wget https://artsy-provisioning-public.s3.amazonaws.com/hokusai/hokusai-$VERSION-Darwin-x86_64.tar.gz

            UNAME=$(uname)
            if [ $UNAME == "Darwin" ]; then
              SHA256=$(shasum -a 256 hokusai-$VERSION-Darwin-x86_64.tar.gz | awk '{ print $1 }')
            fi

            if [ $UNAME == "Linux" ]; then
              SHA256=$(sha256sum hokusai-$VERSION-Darwin-x86_64.tar.gz | awk '{ print $1 }')
            fi

            git clone git@github.com:artsy/homebrew-formulas.git
            cd ./homebrew-formulas

            if grep $VERSION ./Formula/hokusai.rb; then
              echo "Formula version already set to $VERSION"
              cd /tmp
              rm -rf ./homebrew-formulas
              exit 0
            fi

            echo "Bumping formula version to $VERSION"

            cat <<EOF > ./Formula/hokusai.rb
            class Hokusai < Formula
              desc 'Hokusai is a Docker + Kubernetes CLI for application developers'
              homepage 'https://github.com/artsy/hokusai'
              url 'https://artsy-provisioning-public.s3.amazonaws.com/hokusai/hokusai-$VERSION-Darwin-x86_64.tar.gz'
              sha256 '$SHA256'
              version '$VERSION'

              def install
                bin.install 'hokusai'
              end
            end
            EOF

            git commit --author="Hokusai CI" -a -m "Release Hokusai $VERSION"
            git push origin master

            cd /tmp
            rm -f hokusai-$VERSION-Darwin-x86_64.tar.gz
            rm -rf ./homebrew-formulas

workflows:
  version: 2
  build_deploy:
    jobs:
      - test_linux2:
          filters:
            branches:
              ignore: release
      - test_linux3:
          filters:
            branches:
              ignore: release
      - test_macos_10_15_6_py_2:
          filters:
            branches:
              ignore: release
      - test_macos_10_15_6_py_3:
          filters:
            branches:
              ignore: release
      - test_macos_11_1_0_py_2:
          filters:
            branches:
              ignore: release
      - test_macos_11_1_0_py_3:
          filters:
            branches:
              ignore: release
      - test_integration:
          filters:
            branches:
              ignore: release
      - release_beta_linux:
          requires:
            - test_linux2
            - test_integration
          filters:
            branches:
              only: master
      - release_beta3_linux:
          requires:
            - test_linux3
            - test_integration
          filters:
            branches:
              only: master
      - release_beta_macos:
          requires:
            - test_macos_10_15_6_py_2
            - test_integration
          filters:
            branches:
              only: master
      - release_beta3_macos:
          requires:
            - test_macos_10_15_6_py_3
            - test_integration
          filters:
            branches:
              only: master
      - release_beta_macos_11_python_2:
          requires:
            - test_macos_11_1_0_py_2
            - test_integration
      - release_beta_macos_11_python_3:
          requires:
            - test_macos_11_1_0_py_3
            - test_integration
          filters:
            branches:
              only: master
      - release_beta_dockerhub:
          requires:
            - test_linux2
            - test_integration
          filters:
            branches:
              only: master
      - release_version_linux:
          filters:
            branches:
              only: release
      - release_version_macos:
          filters:
            branches:
              only: release
      - release_pip:
          filters:
            branches:
              only: release
      - release_dockerhub:
          filters:
            branches:
              only: release
      - release_github:
          requires:
            - release_version_linux
            - release_version_macos
          filters:
            branches:
              only: release
      - release_homebrew:
          requires:
            - release_version_linux
            - release_version_macos
          filters:
            branches:
              only: release
